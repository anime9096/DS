All Flip Flop:-

1)	SR Flip Flop:-

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

entity SR_FF is
    Port ( S     : in  STD_LOGIC;
           R     : in  STD_LOGIC;
           CLK   : in  STD_LOGIC;
           Q     : out STD_LOGIC;
           Qn    : out STD_LOGIC);
end SR_FF;

architecture Behavioral of SR_FF is
signal Q_int : STD_LOGIC := '0';
begin
    process(CLK)
    begin
        if rising_edge(CLK) then
            if S = '1' and R = '0' then
                Q_int <= '1';
            elsif S = '0' and R = '1' then
                Q_int <= '0';
            elsif S = '0' and R = '0' then
                Q_int <= Q_int;  -- Hold state
            elsif S = '1' and R = '1' then
                Q_int <= '0';  -- Reset state, typically this is an invalid state for SR
            end if;
        end if;
    end process;

    Q <= Q_int;
    Qn <= not Q_int;
end Behavioral;



Output:-


 


2)JK Flip Flop:-
   library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

entity JK_FF is
    Port ( J     : in  STD_LOGIC;
           K     : in  STD_LOGIC;
           CLK   : in  STD_LOGIC;
           Q     : out STD_LOGIC;
           Qn    : out STD_LOGIC);
end JK_FF;

architecture Behavioral of JK_FF is
signal Q_int : STD_LOGIC := '0';
begin
    process(CLK)
    begin
        if rising_edge(CLK) then
            if J = '0' and K = '1' then
                Q_int <= '0';
            elsif J = '1' and K = '0' then
                Q_int <= '1';
            elsif J = '1' and K = '1' then
                Q_int <= not Q_int;
            end if;
        end if;
    end process;

    Q <= Q_int;
    Qn <= not Q_int;
end Behavioral;

Output:-

 











JK Flip Flop:-
 library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity DFlipFlop is
    port (
        D    : in STD_LOGIC;
        CLK   : in STD_LOGIC;
        RST  : in STD_LOGIC;
        Q  : out STD_LOGIC
    );
 end DFlipFlop;

architecture Behavioral of DFlipFlop is 
begin
    process(CLK, RST)
    begin
       
  if RST ='1' then
              Q <='0';
         elsif rising_edge(CLK) then
              Q<= D;
         end if;
       end process;
end Behavioral;
Output:-

 


4) T Flip Flop:-
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

entity T_FF is
    Port ( T     : in  STD_LOGIC;
           CLK   : in  STD_LOGIC;
           Q     : out STD_LOGIC;
           Qn    : out STD_LOGIC);
end T_FF;

architecture Behavioral of T_FF is
signal Q_int : STD_LOGIC := '0';
begin

process(CLK)
begin
    if rising_edge(CLK) then
        if T = '1' then
            Q_int <= not Q_int;
        end if;
    end if;
end process;

Q <= Q_int;
Qn <= not Q_int;

end Behavioral;

Output:-
 








