SHIFT REGISTER CODE::


library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity ShiftRegister_tb is
end ShiftRegister_tb;

architecture Behavioral of ShiftRegister_tb is
    signal clk : STD_LOGIC := '0';
    signal reset : STD_LOGIC := '0';
    signal shift_left : STD_LOGIC := '0';
    signal shift_right : STD_LOGIC := '0';
    signal data_in : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal data_out : STD_LOGIC_VECTOR (3 downto 0);

    -- Instantiate the ShiftRegister
    component ShiftRegister
        Port (
            clk : in STD_LOGIC;
            reset : in STD_LOGIC;
            shift_left : in STD_LOGIC;
            shift_right : in STD_LOGIC;
            data_in : in STD_LOGIC_VECTOR (3 downto 0);
            data_out : out STD_LOGIC_VECTOR (3 downto 0)
        );
    end component;

begin
    UUT: ShiftRegister
        Port map (
            clk => clk,
            reset => reset,
            shift_left => shift_left,
            shift_right => shift_right,
            data_in => data_in,
            data_out => data_out
        );

    -- Clock generation
    clk_process: process
    begin
        while True loop
            clk <= '0';
            wait for 10 ns;
            clk <= '1';
            wait for 10 ns;
        end loop;
    end process;

    -- Test process
    test_process: process
    begin
        -- Initialize
        reset <= '1';
        wait for 20 ns;
        reset <= '0';

        -- Apply inputs
        data_in <= "1101";  -- Initial data

        -- Left shift
        shift_left <= '1';
        wait for 40 ns;
        shift_left <= '0';

        -- Right shift
        shift_right <= '1';
        wait for 40 ns;
        shift_right <= '0';

        -- Add more test cases as needed
        wait;
    end process;

end Behavioral;





OUTPUT::

 
